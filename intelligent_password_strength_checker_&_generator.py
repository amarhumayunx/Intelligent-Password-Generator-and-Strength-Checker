# -*- coding: utf-8 -*-
"""Intelligent Password Strength Checker & Generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HD8UZ-GPdCcYMAbS12-uvRoAM_Vo-TsB
"""

import re
import random
import string
import ipywidgets as widgets
import pyperclip
from IPython.display import display, HTML, clear_output
from IPython.display import Javascript

# Common weak passwords list
COMMON_PASSWORDS = {"123456", "password", "123456789", "qwerty", "abc123", "password1", "123123"}

# Initialize states
dark_mode = False
password_hidden = True  # Track password visibility
password_history = []  # Store previously generated passwords

def check_password_strength(password):
    strength = 0
    feedback = []

    # Check common passwords
    if password.lower() in COMMON_PASSWORDS:
        return "❌ Very Weak (Common Password)", "🔴", 10

    # Length check
    if len(password) >= 16:
        strength += 2
    elif len(password) >= 12:
        strength += 1
    else:
        feedback.append("🔹 Password should be at least 12 characters long.")

    # Uppercase and lowercase check
    if re.search(r"[A-Z]", password) and re.search(r"[a-z]", password):
        strength += 1
    else:
        feedback.append("🔹 Include both uppercase and lowercase letters.")

    # Number check
    if re.search(r"\d", password):
        strength += 1
    else:
        feedback.append("🔹 Include at least one number.")

    # Special character check (at least 2)
    special_chars = re.findall(r"[!@#$%^&*(),.?\":{}|<>]", password)
    if len(special_chars) >= 2:
        strength += 2
    elif special_chars:
        strength += 1
    else:
        feedback.append("🔹 Include at least two special characters.")

    # Detect repeating characters
    if re.search(r"(.)\1{3,}", password):  # e.g., "aaaa" or "1111"
        feedback.append("⚠️ Avoid using repeating characters.")

    # Detect common keyboard patterns
    keyboard_patterns = ["qwerty", "asdf", "12345", "password"]
    if any(pattern in password.lower() for pattern in keyboard_patterns):
        feedback.append("⚠️ Avoid common keyboard patterns.")

    # Strength feedback
    if strength >= 6 and not feedback:
        return "✅ Strong Password", "🟢", 100
    elif strength == 5:
        return "🟡 Good Password", "🟡", 80
    elif strength == 4:
        return "🟠 Fair Password", "🟠", 60
    elif strength == 3:
        return "🔴 Weak Password", "🔴", 40
    else:
        return "❌ Very Weak\n" + "<br>".join(feedback), "🔴", 20

# Function to generate a strong password
def generate_password(_):
    length = length_slider.value
    characters = string.ascii_letters + string.digits + "!@#$%^&*()?"
    strong_password = "".join(random.choice(characters) for _ in range(length))
    password_input.value = strong_password
    update_password_history(strong_password)
    check_password(None)

def generate_passphrase(_):
    words = ["Sunset", "Mountain", "Rocket", "River", "Forest", "Galaxy", "Storm", "Tiger", "Eagle", "Thunder"]
    symbols = "!@#$%^&*?"
    passphrase = "-".join(random.sample(words, 3)) + random.choice(symbols) + str(random.randint(10, 99))
    password_input.value = passphrase
    update_password_history(passphrase)
    check_password(None)

regenerate_button = widgets.Button(description="Regenerate Password")

def regenerate_password(_):
    generate_password(None)  # Calls the existing function

regenerate_button.on_click(regenerate_password)


# Function to update password history
def update_password_history(password):
    if password not in password_history:
        password_history.append(password)
        if len(password_history) > 5:
            password_history.pop(0)
    history_label.value = "<br>".join(password_history[::-1])

def copy_to_clipboard(_):
    password = password_input.value
    js_code = f"navigator.clipboard.writeText('{password}').then(() => alert('✔ Password copied!'));"

    display(Javascript(js_code))

# Function to check password and update output
def check_password(change):
    password = password_input.value
    strength_msg, color, progress = check_password_strength(password)
    result_label.value = f"<b>{strength_msg}</b>"
    progress_bar.value = progress

# Function to toggle password visibility
def toggle_password(_):
    global password_hidden, password_input

    # Preserve current password value
    current_value = password_input.value
    clear_output()
    password_hidden = not password_hidden
    password_input = widgets.Password() if password_hidden else widgets.Text()
    password_input.value = current_value
    password_input.layout = widgets.Layout(width="400px")
    password_input.observe(check_password, names="value")
    toggle_button.description = "Hide" if not password_hidden else "Show"
    display_ui()

# Function to toggle dark mode
def toggle_theme(_):
    global dark_mode
    dark_mode = not dark_mode

    bg_color = "#222" if dark_mode else "white"
    text_color = "white" if dark_mode else "black"

    # Apply styles to all widgets
    display(HTML(f"""
        <style>
            body {{ background-color: {bg_color}; color: {text_color}; }}
            .widget-label {{ color: {text_color}; }}
            input, select, button {{ background-color: {bg_color}; color: {text_color}; border: 1px solid {text_color}; }}
        </style>
    """))

# Function to display UI components
def display_ui():
    display(password_input, length_slider, generate_button, generate_passphrase_button, copy_button, copy_label, result_label, progress_bar, history_label, toggle_button, dark_mode_button)

# Widgets
password_input = widgets.Password(placeholder="Enter password", layout=widgets.Layout(width="400px"))
length_slider = widgets.IntSlider(value=16, min=8, max=32, step=1, description="Length")
generate_button = widgets.Button(description="Generate Strong Password")
generate_passphrase_button = widgets.Button(description="Generate Passphrase")
copy_button = widgets.Button(description="Copy Password")
toggle_button = widgets.Button(description="Show")
dark_mode_button = widgets.Button(description="Toggle Dark Mode")
progress_bar = widgets.FloatProgress(value=0, min=0, max=100, bar_style="info")
result_label = widgets.HTML(value="")
copy_label = widgets.HTML(value="")
history_label = widgets.HTML(value="<b>Recent Passwords:</b>")

# Bind events
generate_button.on_click(generate_password)
generate_passphrase_button.on_click(generate_passphrase)
copy_button.on_click(copy_to_clipboard)
toggle_button.on_click(toggle_password)
dark_mode_button.on_click(toggle_theme)
password_input.observe(check_password, names="value")

# Display UI
display_ui()